<%- include('../partials/navigation.ejs') %>

<div class="px-5 pt-5 rounded-md ">

    <div class="flex flex-wrap items-center justify-between gap-5">
        <p class="text-xl font-semibold xl:text-2xl text-tColor2">recharge</p>
        <!-- <div class="relative">
            <select name="" id="" class="px-2 py-1 border-2 focus:outline-none">
                <option value="">Filter</option>
                <option value="">Filter 1</option>
                <option value="">Filter 2</option>
                <option value="">Filter 3</option>
                <option value="">Filter 4</option>
            </select>
        </div> -->
    </div>

    <!-- All Orders Table -->
    <div class="mt-5">

        <div class="flex flex-col justify-around">

            <div class="pt-5 overflow-x-auto ">
                <table class="table text-xs md:text-sm ">
                    <thead>
                        <tr>
                            <th>USER ID</th>
                            <th>USER NAME</th>
                            <th>AMOUNT</th>
                            <th>NUMBER</th>
                            <th>OPERATOR</th>
                            <th>DATE</th>
                            <th>STATUS</th>


                        </tr>
                    </thead>
                    <tbody>
                        <% for (let recharge of paginatedrecharge) { %>

                        <tr>
                            <td>
                                <div class="flex items-center gap-4">

                                    <div>
                                        <p class="font-semibold"><%= recharge.user_id %></p>

                                    </div>
                                </div>
                            </td>
                            <td>
                                <div class="flex items-center gap-4">

                                    <div>
                                        <p class="font-semibold"><%= recharge.name %></p>

                                    </div>
                                </div>
                            </td>
                            <td>
                                <div>

                                    <div class="flex items-center gap-1">
                                        <p><%= recharge.amount %></p>
                                    </div>
                                </div>
                            </td>
                            <td>
                                <div>

                                    <div class="flex items-center gap-1">
                                        <p><%= recharge.number %></p>
                                    </div>
                                </div>
                            </td>
                            <td>
                                <div>

                                    <div class="flex items-center gap-1">
                                        <p><%= recharge.operator_name %></p>
                                    </div>
                                </div>
                            </td>
                            <td>
                                <div>
                                    <div class="flex items-center gap-1">
                                        <p><%= new Date(recharge.created_at).toLocaleDateString('en-GB') %></p>
                                    </div>
                                </div>
                            </td>
                            <td>
                                <a href="#" class="table-button btn btn-xs btn-outline btn-primary update-status"
                                    data-id="<%= recharge.id %>"><%= recharge.status %></a>

                            </td>



                        </tr>

                        <% } %>
                    </tbody>
                </table>

            </div>

            <div class="flex flex-col justify-between gap-2 py-5 xl:flex-row xl:items-center">
                <p class="text-xs text-center xl:text-sm text-tColor">
                    Show <%= paginatedrecharge.length %> from <%= recharge.length %> recharge
                </p>

                <div
                    class="grid content-center grid-flow-col gap-3 ml-auto mr-auto font-semibold scale-75 xl:scale-100 xl:mr-0 xl:text-sm text-tColor">
                    <% if (page > 1) { %>
                    <a class="flex items-center justify-center w-6 h-6 rounded"
                        href="/recharge-history?page=<%= page - 1 %>">
                        <svg width="6" height="10" viewBox="0 0 8 14" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M7.125 0.75L0.875 7L7.125 13.25" stroke="#84818A" stroke-width="1.5"
                                stroke-linecap="round" stroke-linejoin="round" />
                        </svg>
                    </a>
                    <% } %>

                    <% const maxPagesToShow = 8;
                                               const startPage = Math.max(1, page - Math.floor(maxPagesToShow / 2));
                                               const endPage = Math.min(
                                                   Math.ceil(recharge.length / rechargePerPage),
                                                   startPage + maxPagesToShow - 1
                                               );
                                    
                                               for (let i = startPage; i <= endPage; i++) { %>
                    <a class=" h-6 w-6 rounded flex items-center justify-center <%= i === page ? 'bg-blue-100 text-primaryColor' : '' %>"
                        href="/recharge-history?page=<%= i %>"><%= i %></a>
                    <% } %>

                    <% if (page < Math.ceil(recharge.length / rechargePerPage)) { %>
                    <a class="flex items-center justify-center w-6 h-6 rounded"
                        href="/recharge-history?page=<%= page + 1 %>">
                        <svg width="6" height="10" viewBox="0 0 8 14" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M0.875 0.75L7.125 7L0.875 13.25" stroke="#84818A" stroke-width="1.5"
                                stroke-linecap="round" stroke-linejoin="round" />
                        </svg>
                    </a>
                    <% } %>
                </div>
            </div>

        </div>


    </div>

</div>


</div>

</section>





<!-- Header Section Script -->
<script>
    // Menu toggle button 
    const toggleButton = document.getElementById("toggle-button");
    const toggleMenu = document.getElementById("toggle-menu");
    var toggleCounter = 1;
    toggleButton.onclick = function () {
        toggleCounter++;
        if (toggleCounter % 2 == 0) {
            toggleMenu.classList.remove("hidden");
            toggleMenu.classList.add("grid");
        }
        else {
            toggleMenu.classList.remove("grid");
            toggleMenu.classList.add("hidden");
        }
    }


</script>


<!-- Accordion Script -->
<script>
    const accordionButtons = document.querySelectorAll('.accordion-button');
    const accordionMenu = document.querySelectorAll('.menu-collapse');

    accordionButtons.forEach(button => {
        button.addEventListener('click', () => {
            const accordionCollapse = button.nextElementSibling;
            button.setAttribute('aria-expanded', button.getAttribute('aria-expanded') === 'false' ? 'true' : 'false');
            accordionCollapse.classList.toggle('hidden');
        });
    });

    // Set all accordion items to collapsed state by default
    document.querySelectorAll('.menu-collapse').forEach(collapse => {
        collapse.classList.add('hidden');
    });


</script>


<!-- Table Script -->
<script>
    const tableButtons = document.querySelectorAll('.table-button');
    const tableMenu = document.querySelectorAll('.table-collapse');
    const tableClose = document.querySelectorAll('.table-close');

    tableButtons.forEach(button => {
        button.addEventListener('click', () => {
            const tableCollapse = button.nextElementSibling;
            button.setAttribute('aria-expanded', button.getAttribute('aria-expanded') === 'false' ? 'true' : 'false');
            tableCollapse.classList.toggle('hidden');
        });
    });

    tableClose.forEach(button => {
        button.addEventListener('click', () => {
            const tableCollapse = button.parentElement.parentElement.parentElement;
            button.setAttribute('aria-expanded', button.getAttribute('aria-expanded') === 'false' ? 'true' : 'false');
            tableCollapse.classList.toggle('hidden');
        });
    });


</script>

<script>
    const tables = document.querySelectorAll('.table-collapse');
    window.onclick = function (event) {
        for (let table of tables) {
            if (event.target == table) {
                table.classList.toggle('hidden');
            }
        }
    };
</script>


<script>
    const statusLinks = document.querySelectorAll('.update-status');

    statusLinks.forEach(link => {
        link.addEventListener('click', async (event) => {
            event.preventDefault();

            const id = event.target.dataset.id;
            const response = await fetch(`/recharge-history/${id}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ status: 'received' }),
            });

            if (response.ok) {
                event.target.textContent = 'received';
            } else {
                console.error('Failed to update status');
            }
        });
    });
</script>

</body>

</html>